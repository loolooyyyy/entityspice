<?php print $a['php']; ?>

/**
 * @file
 * <?php print $a['machine_name']; ?>'s bundle classes.
 *
 * this file is auto-generated by EntitySpice only if the entity type has
 * support for bundles.
 */

/**
 * The class used for bundle entities
 */
class <?php echo $a['machine_camel'] ?>Bundle extends EntitySpiceBundleEntity {
  const _entity_type = <?php print $a['type_const'] ?>;

  /**
   * String: Machine name of bundle entity.
   */
  public $name;

  /**
   * String: Human readable name (label) of bundle entity.
   */
  public $label;

  /**
   * Boolean: Whether deleting this bundle is allowed or not.
   */
  public $locked;

  public function __construct(array $values = []) {
    parent::__construct($values, $this::_entity_type);
  }
}

/**
 * The controller class for entity bundles contains methods for CRUD
 * operations. The load method is inherited from the default controller.
 */
class <?php print $a['machine_camel'] ?>BundleController extends EntitySpiceBundleController {
  const _entity_type = <?php print $a['type_const'] ?>;

  public function __construct() {
    parent::__construct($this::_entity_type);
  }
}


/**
 * Entity Bundle UI controller.
 */
class <?php print $a['machine_camel'] ?>BundleUIController extends EntitySpiceBundleEntityUIController {
  const _entity_type = <?php print $a['type_const'] ?>;

  public function __construct($entity_info) {
    parent::__construct($this::_entity_type, $entity_info);
  }
}

/**
* Create a new bundle object - DOES NOT SAVE IT.
*
* @param array $values
*   Associative array of values. At least include ['type' => $type].
*
* @return \Entity created bundle.
*/
function _entityspice_bundle_create(array $values = []) {
  return _entityspice_entity_create(<?php echo $a['machine_name'] ?>, $values);
}

/**
* Load a bundle entity by it's machine name.
*
* @param string $name The machine-readable name of a bundle to load.
*
* @return array.
*   An bundle entity array or FALSE if $name does not exist.
*/
function <?php echo $a['safe'] . $a['machine_name'] ?>_bundle_load($name) {
  $bundles = entity_load_multiple_by_name("<? echo $a["bundle machine name"]>", [$name]);
  foreach ($bundles as $bundle) {
    return $bundle;
  }
}

/**
* Deletes a bundle.
*
* @param entity $bundle the bundle to delete (bundle object)
*/
function <?php echo $a['safe'] . $a['machine_name'] ?>_bundle_delete($bundle) {
  $bundle->delete();
}

/**
* Saves a bundle.
*
* @param entity $bundle the bundle to save (bundle object)
*/
function <?php echo $a['safe'] . $a['machine_name'] ?>_bundle_save($bundle) {
  $bundle->save();
}
