<?php /** @noinspection PhpDocSignatureInspection */
/** @noinspection PhpUnusedParameterInspection */
/** @noinspection PhpIncludeInspection */
/** @noinspection PhpUndefinedFunctionInspection */
/** @noinspection PhpUndefinedConstantInspection */

require_once 'entityspice_error.inc';


function _entityspice_tokens($machine_name) {
  $tokens['php'] = ESToken::non_override('php', '<' . '?' . 'php' . "\n");
  $tokens['machine_name'] = ESToken::non_override('machine_name', $machine_name);

  $tokens['human_name'] = ESToken::label(
    'human_name',
    ucwords(str_replace('_', ' ', $machine_name)),
    'human readable name, aka label.');

  $uc = str_replace(' ', '', $tokens['human_name']->value);
  $tokens['uc'] = ESToken::non_override('uc', $uc, 'upper case first, machine camel name');
  $tokens['lc'] = ESToken::non_override('lc', lcfirst($uc), 'lower case first, machine camel name');

  $tokens['id_key'] = ESToken::machine_name(
    'id_key',
    'id',
    'id key, on entity object, just like nid on $node->nid');
  $tokens['base_table'] = ESToken::machine_name(
    'base_table',
    $machine_name,
    'database table name');
  $tokens['is_fieldable'] = ESToken::bool(
    'is_fieldable',
    TRUE,
    'whether if this is a fieldable entity type, or a non-fieldable one');

  $tokens['access_controlled_actions'] = ESToken::arr(
    'access_controlled_actions',
    ['administer', 'create', 'delete', 'view', 'archive',],
    'actions on the entity, which are controlled by permission, just like ' .
    'node creation, node view, ...; ONLY PROVIDE THE VERB, such as [view] or' .
    ' [create] or ... (view own is added automatically)' .
    ' this value must be set in json array format, as in ["x", "y", "z", ... ].'
  );
  $tokens['view_modes'] = ESToken::map(
    'view_modes',
    ['default' => 'Default'],
    'entity view modes, consult hook_entity_info for more info.',
    ' this value must be set in json map format, as in {"machine_name": "label", ...}'
  );

  $tokens['has_devel_support'] = ESToken::bool(
    'has_devel_support',
    TRUE,
    'whether if this entity type has special support for devel module, just like node/%nid/devel');
  $tokens['has_can_delete_hook'] = ESToken::bool(
    'has_can_delete_hook',
    TRUE,
    'whether if a can_delete_hook is added, so other modules can lock ' .
    'entities of this type and prevent deletion');

  $tokens['has_bundle'] = ESToken::bool(
    'has_bundle',
    TRUE,
    'whether if this entity type supports bundles, just like node types');
  $tokens['bundle_machine_name'] = ESToken::machine_name(
    'bundle_machine_name',
    $machine_name . '_bundle');
  $tokens['bundle_key_name'] = ESToken::machine_name(
    'bundle_key_name',
    'bundle',
    'bundle key name on entity object just like [type] on node objects. ' .
    "DON'T mistake with [bundle_name_key]");
  $tokens['bundle_name_key'] = ESToken::machine_name(
    'bundle_name_key',
    'name',
    'bundle name key on bundle entity object, this could simply be name, as in bundle name' .
    "DON'T mistake with [bundle_key_name]");

  $tokens['bundle_table'] = ESToken::machine_name(
    'bundle_table',
    $machine_name . '_bundle',
    'the table holding entity bundles in database');
  $tokens['bundle_has_lock'] = ESToken::bool(
    'bundle_has_lock',
    TRUE,
    'whether if bundles are lockable and deletion can be prevented, ' .
    'such as when entities of this bundle still exist');
  // TODO
  $tokens['bundle_is_entity'] = ESToken::bool(
    'bundle_is_entity',
    TRUE,
    'whether if bundles are entity themselves');
  $tokens['default_bundles'] = ESToken::map(
    'default_bundles',
    ['test' => 'Test'],
    'default bundles, defined in code (machine name => title json map)' .
    ' this value must be set in json map format, as in {"machine_name": "label", ...}'
  );

  $e_path = str_replace('_', '-', $machine_name);

  // probably should change to parent admin path, but then we need a
  // isOverridden flag to not change it then, which will blow up the whole
  // token logic and all. so just forget it.
  $tokens['bundle_redirect'] = ESToken::uri(
    'bundle_redirect',
    'admin/structure/' . $e_path,
    'the path to redirect user to, after when a new bundle is created or removed');
  $tokens['is_bundle_fieldable'] = ESToken::bool(
    'is_bundle_fieldable',
    TRUE,
    'whether if bundles are fieldable themselves');

  $tokens['has_revision'] = ESToken::bool(
    'has_revision',
    FALSE,
    'whether if the entity type supports revisions, just like node revisions');
  $tokens['revision_table'] = ESToken::machine_name(
    'revision_table',
    $machine_name . '_revision',
    'the table holding entity revisions in database');
  $tokens['revision_key_name'] = ESToken::machine_name(
    'revision_key_name',
    'rid',
    'revision key name on entity object just like [rid] on node objects');
  $tokens['has_revision_log'] = ESToken::bool(
    'has_revision_log',
    TRUE,
    'whether if the entity type has revision logs just like node');

  $tokens['has_owner'] = ESToken::bool(
    'has_owner',
    TRUE,
    'just like $node->uid');

  $tokens['has_static_cache'] = ESToken::bool(
    'has_static_cache',
    TRUE,
    'refer to hook_entity_info docs');
  $tokens['has_field_cache'] = ESToken::bool(
    'has_field_cache',
    TRUE,
    'refer to hook_entity_info docs');

  $tokens['has_label_key'] = ESToken::bool(
    'has_label_key',
    FALSE,
    'whether if entity object has a label property');
  $tokens['label_key_name'] = ESToken::machine_name(
    'label_key_name',
    'title',
    'the label property on entity object just like node->title, if any');

  $tokens['has_language_key'] = ESToken::bool(
    'has_language_key',
    FALSE,
    'whether if entity object has a language property');
  $tokens['has_translation'] = ESToken::bool(
    'has_translation',
    FALSE,
    'whether to introduce locale module as translation module or not');

  $tokens['parent_admin_path'] = ESToken::uri(
    'parent_admin_path',
    'admin/structure/' . $e_path
  );
  $tokens['parent_userland_path'] = ESToken::uri(
    'parent_userland_path',
    $e_path,
    'the path on which list of entities are accessible, just like /node'
  );
  $tokens['entity_delete_redirect_path'] = ESToken::uri(
    'entity_delete_redirect_path',
    $e_path,
    'the path to redirect the user to, when an entity is deleted. A more complex logic can be later added in code.'
  );

  $tokens['has_inline_entity_form_support'] = ESToken::bool(
    'has_inline_entity_form_support',
    TRUE,
    'whether if InlineEntityForm module is supported.');

  return $tokens;
}

final class ESConfig {

  private $t;

  /**
   * @param $machine_name string machine name of entity this config belongs to.
   * @param bool $safe whether if a string prepended to functions (usually
   * underscore) to exclude them from global namespace, so accidentally a hook
   * is not implemented.
   */
  public function __construct($machine_name, $safe = TRUE) {
    ESToken::check($machine_name, ESToken::MACHINE_NAME, 'machine_name');
    ESToken::check($safe, ESToken::BOOL, 'safe_namespace');

    $this->t = _entityspice_tokens($machine_name);
    $this->t['sane'] = ESToken::non_override(
      'sane',
      ($safe ? '_' : '') . $machine_name,
      'namespace-safe machine name');
  }

  function uriCallback() {
    throw new RuntimeException("uriCallback");
  }

  // _________________________________________________________________ OVERRIDE

  function __get($name) {
    switch ($name) {
      case 's':
        $name = 'sane';
        break;
      case 'm':
        $name = 'machine_name';
        break;
    }
    foreach ($this->t as $token) {
      if ($name === $token->name) {
        return $token;
      }
    }
    throw new RuntimeException("no such token: [$name]");
  }

  function __set($name, $value) {
    /** @noinspection PhpUndefinedMethodInspection */
    $this->__get($name)->value = $value;
    $this->__get($name)->validate();
  }

  function names() {
    $ret = [];
    foreach ($this->t as $name => $token) {
      if ($token->type !== ESToken::NON_OVERRIDABLE) {
        $ret[] = $name;
      }
    }
    return $ret;
  }

}

final class ESToken {

  const NON_OVERRIDABLE = 'NON_OVERRIDABLE';

  const UNKNOWN = 'UNKNOWN';

  const MACHINE_NAME = 'MACHINE_NAME';

  const LABEL = 'LABEL';

  const URI = 'URI';

  const BOOL = 'BOOL';

  const FLAT_STRING_ARRAY = 'FLAT_STRING_ARRAY';

  const FLAT_STRING_MAP = 'FLAT_STRING_MAP';

  const FUNC = 'FUNC';


  private $_type;

  private $_name;

  private $_value;

  private $_desc;

  private $_is_valid;

  private $_error;


  function __construct($type, $name, $value = NULL, $desc = NULL) {
    $this->_type = $type;
    $this->_name = $name;
    $this->_desc = $desc;
    $this->_value = $value;
    $this->post_set();
  }

  function __get($name) {
    switch ($name) {
      case 'type':
        return $this->_type;
      case 'name':
        return $this->_name;
      case 'value':
        return $this->_value;
      case 'desc':
        return $this->_desc;
      case 'is_valid':
        return $this->_is_valid;
      case 'error':
        return $this->_error;
      default:
        throw new RuntimeException("can not access [$name], " .
          'can not access any property other than [name, type, value, desc, is_valid, error]');
    }
  }

  function __set($name, $value) {
    if ($name !== 'value') {
      throw new RuntimeException('only [value] can be set');
    }
    if (gettype($value) === 'string' && $this->_type === ESToken::FLAT_STRING_ARRAY) {
      $value = json_decode($value, JSON_FORCE_OBJECT);
    }
    if (gettype($value) === 'string' && $this->_type === ESToken::FLAT_STRING_MAP) {
      $value = json_decode($value, JSON_FORCE_OBJECT);
    }
    if ($this->_type === ESToken::BOOL) {
      $value = _entityspice_v_boolean($value);
    }
    $this->_value = $value;
    $this->post_set();
  }

  function __toString() {
    // sort of like var_export($thing, TRUE);
    switch ($this->_type) {
      case ESToken::FLAT_STRING_ARRAY:
        return json_encode($this->_value); // , JSON_FORCE_OBJECT);
      case ESToken::FLAT_STRING_MAP:
        return strtr(json_encode($this->_value), [
          '"' => "'",
          '}' => ']',
          '{' => '[',
          ':' => ' => ',
        ]);
      case ESToken::BOOL:
        return $this->_value ? 'TRUE' : 'FALSE';
      default:
        return (string) $this->_value;
    }
  }

  function validate() {
    if (!$this->_is_valid) {
      throw new RuntimeException('error: [' . $this->_error . ']');
    }
    return $this;
  }

  private function post_set() {
    $this->_error = self::check($this->_value, $this->_type, $this->_name);
    $this->_is_valid = $this->_error ? FALSE : TRUE;
  }


  static function check($value, $type, $name = NULL) {
    $say = str_replace("\n", ' ', var_export($value, TRUE));
    $b = "[type::$type] - [name::$name] - [value::$say]";
    if ($value === NULL) {
      $err = "$b null is not valid";
      return $err;
    }
    if ($type === ESToken::MACHINE_NAME) {
      $regex = '/^[a-z][_0-9a-z]*?$/';
      $err = "$b must match the regex: $regex";
      if (!is_string($value) || empty($value) || !preg_match($regex, $value)) {
        return $err;
      }
    }
    elseif ($type === ESToken::LABEL) {
      $regex = '/^[A-Za-z][_0-9a-zA-Z ]*?$/';
      $err = "$b must match the regex: $regex. " .
        " Labels are constrained for now BUT can be changed later (after the module is generated)";
      if (!is_string($value) || empty($value) || !preg_match($regex, $value)) {
        return $err;
      }
    }
    elseif ($type === ESToken::URI) {
      // TODO make this better and more rigorous? or perhaps it doesn't matter?
      $err = "$b is not a valid uri. " .
        " URIs are constrained for now BUT can be changed later (after the module is generated)";
      if ($value === '\<front\>') {
        return '';
      }
      if (!is_string($value) || empty($value)) {
        return $err;
      }
      if (strlen(str_replace('/', '', $value)) === 0) {
        return $err;
      }
      if (!ctype_alnum(str_replace('/', '', $value)) === 0) {
        return $err;
      }
      if (strlen(str_replace('//', '', $value)) !== strlen($value)) {
        return $err;
      }
    }
    elseif ($type === ESToken::BOOL) {
      $err = "$b is not a valid boolean. valid values: " .
        'y, n, t, f, false, true, yes, no, 0, 1 as digit or string ' .
        '(strings can be upper or lower case). empty is NOT valid';
      if (_entityspice_v_boolean($value) === NULL) {
        return $err;
      };
    }
    elseif ($type === ESToken::FLAT_STRING_ARRAY && gettype($value) === 'string') {
      $err = "$b must be a valid FLAT json ARRAY (not map), containing only ascii alpha-num.";
      $json = NULL;
      try {
        $json = json_decode($value, JSON_FORCE_OBJECT);
      } catch (Exception $e) {
        return $err;
      }
      if ($json === NULL) {
        return $err;
      }
      $i = 0;
      foreach ($json as $index => $item) {
        if ($i !== $index) {
          return $err;
        }
        $i++;
        if (!ctype_alnum($item)) {
          return $err;
        }
      }
    }
    elseif ($type === ESToken::FLAT_STRING_ARRAY) {
      $err = "$b must be a valid FLAT json ARRAY (not map), containing only ascii alpha-num.";
      if (!is_array($value)) {
        return $err;
      }
      $i = 0;
      foreach ($value as $index => $item) {
        if ($i !== $index) {
          return $err;
        }
        $i++;
        if (!ctype_alnum($item)) {
          return $err;
        }
      }
    }
    elseif ($type === ESToken::FLAT_STRING_MAP && gettype($value) === 'string') {
      $err = "$b must be a valid FLAT json map (simple string' . 
      ' key (machine-name-like), simple string value), containing only ascii alpha-num.";
      $json = NULL;
      try {
        $json = json_decode($value, JSON_FORCE_OBJECT);
      } catch (Exception $e) {
        return $err;
      }
      if ($json === NULL) {
        return $err;
      }
      foreach ($json as $index => $item) {
        if ($err = ESToken::check($index, ESToken::MACHINE_NAME, "$name map key")) {
          return $err;
        }
        if ($err = ESToken::check($item, ESToken::LABEL, "$name map value")) {
          return $err;
        }
      }

    }
    elseif ($type === ESToken::FLAT_STRING_MAP) {
      $err = "$b must be a valid FLAT json map (simple string' . 
      ' key (machine-name-like), simple string value), containing only ascii alpha-num.";
      foreach ($value as $index => $item) {
        if ($err = ESToken::check($index, ESToken::MACHINE_NAME, "$name map key")) {
          return $err;
        }
        if ($err = ESToken::check($item, ESToken::LABEL, "$name map value")) {
          return $err;
        }
      }
    }
    elseif ($type === ESToken::FUNC) {
      $regex = '/^[a-z][_0-9a-z]*?$/';
      $err = "$b must match the regex: $regex";
      if (!is_string($value) || empty($value) || !preg_match($regex, $value)) {
        return $err;
      }
    }
    elseif ($type === ESToken::NON_OVERRIDABLE) {
      $err = "$b can not be overridden.";
      return $err;
    }
    else {
      $err = "$b do not know how to validate.";
      return $err;
    }
    return '';
  }


  static function non_override($name, $value, $desc = NULL) {
    return new ESToken(ESToken::NON_OVERRIDABLE, $name, $value, $desc);
  }

  static function unknown($name, $value, $desc = NULL) {
    return new ESToken(ESToken::UNKNOWN, $value, $desc);
  }

  static function machine_name($name, $value, $desc = NULL) {
    return new ESToken(ESToken::MACHINE_NAME, $name, $value, $desc);
  }

  static function label($name, $value, $desc = NULL) {
    return new ESToken(ESToken::LABEL, $name, $value, $desc);
  }

  static function uri($name, $value, $desc = NULL) {
    return new ESToken(ESToken::URI, $name, $value, $desc);
  }

  static function bool($name, $value, $desc = NULL) {
    return new ESToken(ESToken::BOOL, $name, $value, $desc);
  }

  static function arr($name, $value, $desc = NULL) {
    return new ESToken(ESToken::FLAT_STRING_ARRAY, $name, $value, $desc);
  }

  static function map($name, $value, $desc = NULL) {
    return new ESToken(ESToken::FLAT_STRING_MAP, $name, $value, $desc);
  }

  static function func($name, $value, $desc = NULL) {
    return new ESToken(ESToken::FUNC, $name, $value, $desc);
  }

}


/**
 * Implements hook_drush_help().
 *
 * @param $section
 */
function entityspice_drush_help($section) {
  // @TODO
}

/**
 * Implements hook_drush_command().
 */
function entityspice_drush_command() {
  $items['entityspice-cook'] = [
    'aliases' => ['cook'],
    'callback' => '_entityspice_drush_pre_ekran',
    'description' => 'Create a module containing an entity(cook an entity type).',
    'arguments' => ['machine - name' => 'Machine name of generated entity . '],
    'options' => [],
    'examples' => [],
    'bootstrap' => DRUSH_BOOTSTRAP_DRUPAL_FULL,
  ];
  $dummy = new ESConfig('dummy');
  foreach ($dummy->names() as $name) {
    $items['entityspice-cook']['options'][$name] = $dummy->{$name}->desc;
  }
  return $items;
}

/**
 * Asks user for yes or no and parse input.
 *
 * Accepts all forms of yes and no, y, Y, 1, t, true, TRUE, false, FALSE, ...
 *
 * @param string $msg message to display as prompt.
 *
 * @return bool true if user said yes false otherwise.
 */
function _entityspice_drush_presume($msg) {
  drush_print_prompt($msg . " (Y/n): ", 0);
  if (drush_get_context('DRUSH_AFFIRMATIVE')) {
    // Automatically accept confirmations if the --yes argument was supplied.
    drush_print("y");
    return TRUE;
  }
  elseif (drush_get_context('DRUSH_NEGATIVE')) {
    // Automatically cancel confirmations if the --no argument was supplied.
    drush_print("n");
    return FALSE;
  }
  else {
    $stdin = fopen("php://stdin", "r");
    while ($line = fgets($stdin)) {
      $answer = _entityspice_v_boolean($line);
      if (empty($line) || $line === "\n" || $answer === TRUE) {
        return TRUE;
      }
      if ($answer === FALSE) {
        return FALSE;
      }
      drush_print_prompt($msg . " ([y]/n): ", 0);
    }
  }
  return FALSE;
}

/**
 * drush command callback.
 *
 * @param string $machine_name
 *
 * @return bool true on success, false otherwise.
 * @throws \Exception
 */
function _entityspice_drush_pre_ekran($machine_name = NULL) {
  if ($err = ESToken::machine_name('machine_name', $machine_name)->error) {
    drush_set_error($err);
    return FALSE;
  }
  if (module_exists($machine_name)) {
    drush_set_error("a module named [$machine_name] already exists");
    return FALSE;
  }

  // ================================================== Handle drush cli options
  $already = [];
  $cfg = new ESConfig($machine_name);
  foreach ($cfg->names() as $name) {
    $arg = drush_get_option($name, NULL);
    if ($arg === NULL) {
      continue;
    }
    $already[] = $name;
    $cfg->{$name}->value = $arg;
    if (!$cfg->{$name}->is_valid) {
      drush_set_error($cfg->{$name}->error);
      return FALSE;
    }
  }

  // ======================================================= Handle drush prompt
  if (!_entityspice_drush_presume('do you want to use default options ? ')) {
    drush_log('Enter "?" to see each arguments help, ' .
      "leave empty for default value\n", 'ok');
    foreach ($cfg->names() as $name) {
      if (in_array($name, $already, TRUE)) {
        continue;
      }
      $desc = $cfg->{$name}->desc;
      $def = $cfg->{$name}->value;
      $def_str = $cfg->{$name} . '';
      if (is_array($def)) {
        $def = json_encode($def);
        $def_str = $def;
      }
      while (TRUE) {
        $value = drush_prompt($name . ' (? for help) ', $def_str, TRUE);
        $value = trim($value);
        if ($value === '?') {
          drush_log($desc . "\n", 'ok');
          continue;
        }
        elseif (!empty($value)) {
          $cfg->{$name}->value = $value;
        }
        if (!$cfg->{$name}->is_valid) {
          drush_log($cfg->{$name}->error, 'error');
        }
        else {
          break;
        }
      };
    }
  }

  foreach ($cfg->names() as $name) {
    drush_log($name . ': ' . $cfg->{$name}->value, 'ok');
  }

  // ===================================================================== EKRAN
  $dest = _entityspice_pm_download_destination('module') . '/' . $machine_name;
  if (is_dir($dest)) {
    drush_set_error("destination already exists: $dest, installing into an existing" .
      ' destination is dangerous and not supported');
    return FALSE;
  }

  $tmp = drush_tempdir() . '/' . $machine_name;
  if (!drush_mkdir($tmp)) {
    drush_log('could not mkdir tmp directory: ' . $tmp);
    return FALSE;
  }
  if ($err = _entityspice_ekran($tmp, $cfg)) {
    drush_log("failed: $err", 'error');
    return FALSE;
  }

  if (!drush_move_dir($tmp, $dest)) {
    drush_log("could not mv $tmp to $dest", 'error');
    return FALSE;
  }

  drush_log('FIN, your beautiful entity type is generated at: ' . $dest, 'ok');
  return TRUE;
}

// _______________________________________________________________________ MAIN

/**
 * Stolen from drush pm-download, to find where to put generated module in.
 *
 * So that there is no hard dependency on drush.
 *
 * Only used by function _entityspice_pm_download_destination().
 */
function _entityspice_pm_download_destination_lookup($type, $drupal_root, $sitepath, $create = FALSE) {
  $destination = $type . 's';
  // Prefer /custom if it exists.
  if ($sitepath) {
    $destination = $sitepath . '/' . $destination;
  }
  $custom = $destination . '/custom';
  if (is_dir($custom)) {
    $destination = $custom;
  }
  if ($create) {
    drush_log(dt('Attempting to create destination directory at !dir', ['!dir' => $destination]));
    drush_mkdir($destination, TRUE);
  }
  if (is_dir($destination)) {
    drush_log(dt('Using destination directory !dir', ['!dir' => $destination]));
    return $destination;
  }
  drush_log(dt('Could not find destination directory at !dir', ['!dir' => $destination]));
  return FALSE;
}

/**
 * Stolen from drush pm-download, to find where to put generated module in.
 *
 * So that there is no hard dependency on drush.
 */
function _entityspice_pm_download_destination($type) {
  $drupal_root = drush_get_context('DRUSH_DRUPAL_ROOT');
  $site_root = drush_get_context('DRUSH_DRUPAL_SITE_ROOT');
  $full_site_root = (empty($drupal_root) || empty($site_root)) ? '' : $drupal_root . '/' . $site_root;
  $sitewide = empty($drupal_root) ? '' : $drupal_root . '/' . drush_drupal_sitewide_directory();

  $in_site_directory = FALSE;
  // Check if we are running within the site directory.
  if (strpos(realpath(drush_cwd()), realpath($full_site_root)) !== FALSE || (drush_get_option('use-site - dir', FALSE))) {
    $in_site_directory = TRUE;
  }

  $destination = '';
  // Attempt 1: If we are in a specific site directory, and the destination
  // directory already exists, then we use that.
  if (empty($destination) && $site_root && $in_site_directory) {
    $create_dir = drush_get_option('use-site - dir', FALSE);
    $destination = _entityspice_pm_download_destination_lookup($type, $drupal_root, $full_site_root, $create_dir);
  }
  // Attempt 2: If the destination directory already exists for
  // the sitewide directory, use that.
  if (empty($destination) && $drupal_root) {
    $destination = _entityspice_pm_download_destination_lookup($type, $drupal_root, $sitewide);
  }
  // Attempt 3: If a specific (non default) site directory exists and
  // the sitewide directory does not exist, then create destination
  // in the site specific directory.
  if (empty($destination) && $site_root && $site_root !== 'sites /default' && is_dir($full_site_root) && !is_dir($sitewide)) {
    $destination = _entityspice_pm_download_destination_lookup($type, $drupal_root, $full_site_root, TRUE);
  }
  // Attempt 4: If sitewide directory exists, then create destination there.
  if (empty($destination) && is_dir($sitewide)) {
    $destination = _entityspice_pm_download_destination_lookup($type, $drupal_root, $sitewide, TRUE);
  }
  // Attempt 5: If site directory exists (even default), then create
  // destination in that directory.
  if (empty($destination) && $site_root && is_dir($full_site_root)) {
    $destination = _entityspice_pm_download_destination_lookup($type, $drupal_root, $full_site_root, TRUE);
  }
  // Attempt 6: If we didn't find a valid directory yet(or we somehow found
  // one that doesn't exist) we always fall back to the current directory.
  if (empty($destination) || !is_dir($destination)) {
    $destination = drush_cwd();
  }

  return $destination;
}

function _entityspice_ekran($target_dir, ESConfig $tokens) {
  if (defined('DRUSH_BOOTSTRAP_DRUPAL')) {
    if (!drush_op('chdir', $target_dir)) {
      return 'could not chdir into target: ' . $target_dir;
    }
    foreach (_entityspice_render($tokens) as $file => $text) {
      $f = drush_op('fopen', 'w', $file);
      if (!$f) {
        drush_log('warning', 'could not open file for writing, dry_run? -> ' . $file);
        continue;
      }
      drush_op('fwrite', $f, $text);
      drush_op('fclose', $f);
    }
    return '';
  }
  else {
    if (!chdir($target_dir)) {
      return 'could not chdir into target: ' . $target_dir;
    }
    foreach (_entityspice_render($tokens) as $file => $text) {
      $f = fopen($file, 'w');
      if (!$f) {
        return "could not create file: $file";
      }
      fwrite($f, $text);
      fclose($f);
    }
    return '';
  }
}

/**
 * Before calling:
 *  - ensure valid machine name.
 *  - ensure no module with that machine name exist.
 *  - ensure all token values are provided.
 *  - ensure all tokens have valid values.
 */
function _entityspice_render(ESConfig $a) {
  $files = [];
  foreach ([
             'access.inc',
             'bundle.inc',
             'class.inc',
             'dev.inc',
             'display.inc',
             'entity.inc',
             'info',
             'inline_entity_form.inc',
             'install',
             'menu.inc',
             'module',
           ] as $f) {
    if ($f === 'bundle.class.inc' && !$a->has_bundle->value) {
      continue;
    }
    if ($f === 'inline_entity_form.inc' && !$a->has_inline_entity_form_support->value) {
      continue;
    }
    if ($f === 'dev.inc' && !$a->has_devel_support->value) {
      continue;
    }

    ob_start();
    require "template/PLACEHOLDER.$f.tpl";
    $files[$a->m . '.' . $f] = ob_get_contents();
    ob_end_clean();
  }
  return $files;
}
