<?php

const _ENTITYSPICE_HAS_INLINE_ENTITY_FORM = 'has_inline_entity_form';

const _ENTITYSPICE_HAS_REVISION = 'has_revision';
const _ENTITYSPICE_HAS_BUNDLE = 'has_bundle';
const _ENTITYSPICE_HAS_UID = 'has_uid';
const _ENTITYSPICE_HAS_CREATED = 'has_created';
const _ENTITYSPICE_HAS_UPDATED = 'has_updated';
const _ENTITYSPICE_HAS_TITLE = 'has_title';

const _ENTITYSPICE_KEY_REVISION = 'key_revision';
const _ENTITYSPICE_KEY_BUNDLE = 'key_bundle';
const _ENTITYSPICE_KEY_UID = 'key_uid';
const _ENTITYSPICE_KEY_CREATED = 'key_created';
const _ENTITYSPICE_KEY_UPDATED = 'key_updated';
const _ENTITYSPICE_KEY_TITLE = 'key_title';


const ENTITYSPICE_DEVELOPMENT = TRUE;
const ENTITYSPICE_DANGEROUS_DEBUG = TRUE;

if (ENTITYSPICE_DEVELOPMENT) {
  require_once 'inc/dev_datahandler.class.inc';
}

require_once 'config.inc';
require_once 'inc/_require.inc';


/**
 * Thrown when some operation is not supported by an entity type.
 *
 * e.g get title (as not all entity types might have a title).
 */
class EntitySpiceOperationNotSupported extends RuntimeException {

}

// ___________________________________________________________________ METADATA

/**
 * Get hook_entityspice_info() of an specific entity type.
 *
 * @param string $etype
 *
 * @return \EntitySpiceEntityConfig for $etype.
 */
function _entityspice_get_info($etype) {
  if (empty($etype) || !is_string($etype)) {
    throw new RuntimeException('entity type must be string');
  }

  $info = _entityspice_get_info_all();
  if (!isset($info[$etype])) {
    throw new EntitySpiceOperationNotSupported('entity type is not a entityspice entity, ' .
      'is hook_entityspice implemented for it?');
  }

  return $info[$etype];
}

/**
 * Get result of all modules implementing hook_entityspice_info().
 *
 * Disables entityspice cache if ENTITYSPICE_DEVELOPMENT flag is set to true.
 *
 * Will catch you and burn your kittens if you do not return what this
 * function expects, in you entity spice hook.
 */
function _entityspice_get_info_all() {
  $drupal_static_fast = &drupal_static(__FUNCTION__, ['info' => NULL]);
  $info = &$drupal_static_fast['info'];

  if ($info === NULL || ENTITYSPICE_DEVELOPMENT) {
    $info = cache_get('entityspice');
    if (!$info || ENTITYSPICE_DEVELOPMENT) {
      $info = [];
      $check_for_errors_on_already_defined = [];
      foreach (module_implements('entityspice_info') as $module) {
        // Get entity types defined by module.
        $modules_entity_types = module_invoke($module, 'entityspice_info');
        if (!is_array($modules_entity_types)) {
          throw new RuntimeException("module [$module] did not return the required array for hook_entityspice_info");
        }
        foreach ($modules_entity_types as $entity_type => $details) {
          // ----------------------------- BEGIN CHECKS AND HUSSELS AND FISSLES
          if (isset($check_for_errors_on_already_defined[$entity_type])) {
            throw new RuntimeException('duplicate entity type [' . $entity_type . '],' .
              'by modules ' . $check_for_errors_on_already_defined[$entity_type] .
              ' and ' . $modules_entity_types .
              ' did you mean HOOK_entityspice_info_alter?');
          }
          if (!is_object($details) || !($details instanceof EntitySpiceEntityConfig)) {
            throw new RuntimeException('bad entity type definition for: ' . $entity_type);
          }
          $check_for_errors_on_already_defined[$entity_type] = $module;
          // ------------------------------- END CHECKS AND HUSSELS AND FISSLES
          $info[$entity_type] = $details;
        }
      }
      drupal_alter('entityspice_info', $info);
      cache_set('entityspice', $info);
    }
    else {
      $info = $info->data;
    }
    $drupal_static_fast['info'] = $info;
  }

  return $info;
}

/**
 * @param $etype
 * @param $entity
 *
 * @return string
 */
function _entityspice_get_entity_name($etype, $entity) {
  $info = _entityspice_get_info($etype);
  return $info->hasTitle() ? $entity->{$info->titleKey()} : $entity->getId() . '';
}

// _______________________________________________________________________ MAIN

/**
 * Implements hook_menu().
 */
function entityspice_menu() {
  // Default base path for entity types.
  $items['entityspice'] = [
    'title' => 'Entity Spice',
    'page callback' => '_entityspice_default_page',
    'access arguments' => ['administer entityspice'],
    'description' => 'Default entity page for EntitySpice.',
    'file' => 'entityspice.admin.inc',
  ];

  // Will output information about all modules defining entities using ES.
  if (module_exists('devel')) {
    $items['devel/entityspice'] = [
      'title' => 'hook_entityspice_info()',
      'page callback' => '_entityspice_hook_info_page',
      'access arguments' => ['access devel information'],
      'description' => 'View all modules and their info implementing entityspice hook',
      'file' => 'inc/dev_datahandler.class.inc',
    ];
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function entityspice_permission() {
  $p['administer entityspice'] = [
    'title' => 'administer entityspice',
  ];
  return $p;
}
